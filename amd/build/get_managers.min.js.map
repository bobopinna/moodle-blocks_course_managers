{"version":3,"file":"get_managers.min.js","sources":["../src/get_managers.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides the list of courses managers.\n *\n * @module      block_course_managers/get_managers\n * @copyright   2023 Roberto Pinna\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport {render as renderTemplate} from 'core/templates';\n\nconst Selectors = {\n    filter: \"block-course_managers-search-filter\",\n    list: \"block-course_managers-list\",\n};\n\nexport const init = (blockId) => {\n    document.addEventListener('DOMContentLoaded', () => {\n        const filter = document.querySelector(Selectors.filter);\n\n        filter.addEventListener(\"keyup\", () => {\n            getManagers(Selectors.list, filter.value, blockId);\n        });\n\n        getManagers(Selectors.list, null, blockId);\n    });\n};\n\n/**\n * Load the list of managers matching the query and render the list for them.\n *\n * @param {String} selector The list selector.\n * @param {String} query The query string.\n * @param {Integer} blockId Current block insance id.\n */\nexport async function getManagers(selector, query, blockId) {\n\n    const request = {\n        methodname: 'block_course_managers_get_managers',\n        args: {\n            query: query,\n            blockid: blockId,\n        }\n    };\n\n    try {\n        const response = await Ajax.call([request])[0];\n\n        let managers = [];\n        response.list.forEach(manager => {\n            managers.push(renderTemplate('block_course_managers/manager_element', manager));\n        });\n        managers = await Promise.all(managers);\n\n        document.querySelector(selector).innerHTML = managers.join(\"\\n\");\n\n    } catch (e) {\n        window.console.log('Communication error retrieving courses managers');\n    }\n}\n"],"names":["Selectors","getManagers","selector","query","blockId","request","methodname","args","blockid","response","Ajax","call","managers","list","forEach","manager","push","Promise","all","document","querySelector","innerHTML","join","e","window","console","log","addEventListener","filter","value"],"mappings":";;;;;;;6KA0BMA,iBACM,sCADNA,eAEI,4CAsBYC,YAAYC,SAAUC,MAAOC,eAEzCC,QAAU,CACZC,WAAY,qCACZC,KAAM,CACFJ,MAAOA,MACPK,QAASJ,oBAKPK,eAAiBC,cAAKC,KAAK,CAACN,UAAU,OAExCO,SAAW,GACfH,SAASI,KAAKC,SAAQC,UAClBH,SAASI,MAAK,qBAAe,wCAAyCD,aAE1EH,eAAiBK,QAAQC,IAAIN,UAE7BO,SAASC,cAAclB,UAAUmB,UAAYT,SAASU,KAAK,MAE7D,MAAOC,GACLC,OAAOC,QAAQC,IAAI,kEAzCNtB,UACjBe,SAASQ,iBAAiB,oBAAoB,WACpCC,OAAST,SAASC,cAAcpB,kBAEtC4B,OAAOD,iBAAiB,SAAS,KAC7B1B,YAAYD,eAAgB4B,OAAOC,MAAOzB,YAG9CH,YAAYD,eAAgB,KAAMI"}