{"version":3,"file":"get_managers.min.js","sources":["../src/get_managers.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides the list of courses managers.\n *\n * @module      block_course_managers/get_managers\n * @copyright   2023 Roberto Pinna\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\n\nconst Selectors = {\n    filter: \"#block-course_managers-search-filter\",\n    list: \"#block-course_managers-list\",\n};\n\nvar nothingString = null;\n\nexport const init = async(blockId) => {\n    Templates.appendNodeContents(Selectors.list, '<i class=\"fa-solid fa-circle-notch fa-spin fa-xl\"></i>', '');\n\n    const managers = await getManagers(blockId);\n    nothingString = await getString('nothingtodisplay', 'block_course_managers');\n\n    if (managers.length > 0) {\n        displayManagers(managers, Selectors.list, null);\n\n        document.addEventListener(\"keyup\", e => {\n            if (e.target.closest(Selectors.filter)) {\n                displayManagers(managers, Selectors.list, Selectors.filter);\n            }\n        });\n    } else {\n        document.querySelectorAll(Selectors.list + \" *\").forEach(n => n.remove());\n        Templates.appendNodeContents(Selectors.list, '<i>' + nothingString + '</i>', '');\n    }\n};\n\n/**\n * Load the list of managers.\n *\n * @param {Number} blockId Current block instance id.\n */\nexport const getManagers = (blockId) => {\n    const managers = fetchMany([{\n        methodname: 'block_course_managers_get_managers',\n        args: {blockid: blockId},\n    }], true, false);\n    return managers[0];\n};\n\n/**\n * Display the list of filtered managers.\n *\n * @param {Array} managers The list of site managers.\n * @param {String} listSelector The HTML element selector for output the list.\n * @param {String} filterSelector The HTML element selector to get filter value.\n **/\nconst displayManagers = (managers, listSelector, filterSelector) => {\n    let query = null;\n    if (filterSelector !== null) {\n        query = document.querySelector(filterSelector).value;\n    }\n\n    if (managers.length > 0) {\n        let counter = 0;\n        managers.forEach(manager => {\n            if (counter == 0) {\n                document.querySelectorAll(listSelector + \" *\").forEach(n => n.remove());\n                Templates.appendNodeContents(listSelector, '<ul></ul>', '');\n            }\n            if ((query === null) || manager.fullname.toLowerCase().includes(query.toLowerCase())) {\n                counter++;\n                Templates.renderForPromise('block_course_managers/manager_element', manager)\n                .then(({html, js}) => {\n                    Templates.appendNodeContents(listSelector + ' ul', html, js);\n                })\n                .catch((error) => displayException(error));\n            }\n        });\n        if (counter == 0) {\n            Templates.appendNodeContents(listSelector, '<i>' + nothingString + '</i>', '');\n        }\n    }\n};\n"],"names":["Selectors","nothingString","async","appendNodeContents","managers","getManagers","blockId","length","displayManagers","document","addEventListener","e","target","closest","querySelectorAll","forEach","n","remove","methodname","args","blockid","listSelector","filterSelector","query","querySelector","value","counter","manager","fullname","toLowerCase","includes","renderForPromise","then","_ref","html","js","catch","error"],"mappings":";;;;;;;2KA4BMA,iBACM,uCADNA,eAEI,kCAGNC,cAAgB,mBAEAC,MAAAA,6BACNC,mBAAmBH,eAAgB,yDAA0D,UAEjGI,eAAiBC,YAAYC,SACnCL,oBAAsB,mBAAU,mBAAoB,yBAEhDG,SAASG,OAAS,GAClBC,gBAAgBJ,SAAUJ,eAAgB,MAE1CS,SAASC,iBAAiB,SAASC,IAC3BA,EAAEC,OAAOC,QAAQb,mBACjBQ,gBAAgBJ,SAAUJ,eAAgBA,uBAIlDS,SAASK,iBAAiBd,eAAiB,MAAMe,SAAQC,GAAKA,EAAEC,8BACtDd,mBAAmBH,eAAgB,MAAQC,cAAgB,OAAQ,YASxEI,YAAeC,UACP,cAAU,CAAC,CACxBY,WAAY,qCACZC,KAAM,CAACC,QAASd,YAChB,GAAM,GACM,0CAUdE,gBAAkB,CAACJ,SAAUiB,aAAcC,sBACzCC,MAAQ,QACW,OAAnBD,iBACAC,MAAQd,SAASe,cAAcF,gBAAgBG,OAG/CrB,SAASG,OAAS,EAAG,KACjBmB,QAAU,EACdtB,SAASW,SAAQY,UACE,GAAXD,UACAjB,SAASK,iBAAiBO,aAAe,MAAMN,SAAQC,GAAKA,EAAEC,8BACpDd,mBAAmBkB,aAAc,YAAa,MAE7C,OAAVE,OAAmBI,QAAQC,SAASC,cAAcC,SAASP,MAAMM,kBAClEH,6BACUK,iBAAiB,wCAAyCJ,SACnEK,MAAKC,WAACC,KAACA,KAADC,GAAOA,4BACAhC,mBAAmBkB,aAAe,MAAOa,KAAMC,OAE5DC,OAAOC,QAAU,2BAAiBA,aAG5B,GAAXX,4BACUvB,mBAAmBkB,aAAc,MAAQpB,cAAgB,OAAQ"}